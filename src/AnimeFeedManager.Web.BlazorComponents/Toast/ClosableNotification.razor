<div
    role="alert"
    class="alert shadow-lg max-w-(--breakpoint-md)"
    x-data="{ 
        open: true, 
        progress: 0, 
        intervalId: null, 
        startTimeout() {
            const totalTime = @CloseTime.TotalMilliseconds;
            const intervalTime = 500;
            const decrement = intervalTime / totalTime * 100;
            this.intervalId = setInterval(() => {
                if (this.progress >= 100) {
                    clearInterval(this.intervalId);
                    this.open = false;
                     setTimeout(() => {
                        $el.remove();
                    }, 500);
                } else {
                    this.progress += decrement;
                }
            }, intervalTime);
        },
        stopTimeout() {
            clearInterval(this.intervalId);
        }
    }"
    x-init="startTimeout()"
    x-show="open"
    x-transition.duration.500ms
    x-on:open="startTimeout"
    x-on:close="stopTimeout"
>
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="hidden md:block @Type.AsStrokeStyle() shrink-0 w-6 h-6">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
    </svg>
    <div>
        <progress class="progress progress-primary w-full" value="0" x-bind:value="progress"  max="100"></progress>
        @Content
    </div>
    <button
        type="button"
        class="btn btn-primary btn-sm -mt-3 md:mt-0"
        x-on:click="open = false; stopTimeout();"
    >Ok</button>
</div>

@code {
    [Parameter] public RenderFragment Content { get; set; } = @<span></span>;
    [Parameter, EditorRequired] public ToastType Type { get; set; } = ToastType.Info;
    [Parameter] public TimeSpan CloseTime { get; set; } = TimeSpan.FromSeconds(5);
}