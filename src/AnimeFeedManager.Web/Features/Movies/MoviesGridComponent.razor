@using System.Collections.Immutable
@using AnimeFeedManager.Old.Common.Domain.Errors
@using AnimeFeedManager.Old.Common.Domain.Types
@using AnimeFeedManager.Old.Common.Dto
@using AnimeFeedManager.Old.Common.Types
@using AnimeFeedManager.Old.Features.Movies.Library
@using AnimeFeedManager.Old.Features.Movies.Library.Types
@inject ILogger<MoviesGridComponent> Logger;
@inject MoviesLibraryGetter LibraryGetter;
@inject IUserProvider UserProvider;

<WithMessage Message="@Message" DomainError="@DomainError">
    <Content>
        <GridSection x-data="gridFilter()">
            <GridControls>
                <ul class="menu menu-xs menu-horizontal bg-base-200 rounded-box  mx-2 md:mx-10">
                    @if (!_isAnonymous)
                    {
                        <li>
                            <a x-on:click.throttle.300ms="toggleFilter('@Attributes.SubscribedAttributeDefinition.Attribute')">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <title>Filter Subscribed</title>
                                    <details>Filters Movies you are subscribed</details>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z"></path>
                                </svg>
                                <span>Filter Subscribed</span>
                                <div x-show="filters.includes('@Attributes.SubscribedAttributeDefinition.Attribute')" class="badge badge-primary badge-xs"></div>
                            </a>
                        </li>
                    }

                    <li>
                        <a x-on:click.throttle.300ms="toggleFilter('@Attributes.HasFeedAttributeDefinition.Attribute')">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <title>Filter with Feed</title>
                                <details>Filters Movies that have a feed</details>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            <span>Filter with Feed</span>
                            <div x-show="filters.includes('@Attributes.HasFeedAttributeDefinition.Attribute')" class="badge badge-primary badge-xs"></div>
                        </a>
                    </li>
                </ul>
            </GridControls>


            <GridContent>
                @foreach (var item in _movies.Select((value, index) => new { value, index }))
                {
                    <MovieCard Movie="item.value" style="@GenerateViewTransitionNameStyle($"card-{item.index}")"></MovieCard>
                }
            </GridContent>
        </GridSection>
    </Content>
</WithMessage>

@code {
    [Parameter, EditorRequired] public SeasonInformation SeasonInfo { get; set; } = new DefaultSeasonInformation();
    [Parameter] public string Message { get; set; } = string.Empty;
    [Parameter] public DomainError? DomainError { get; set; }
    private BaseMovie[] _movies = [];
    private bool _isAnonymous = true;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserProvider.GetCurrentUser(default);
        _isAnonymous = user is Anonymous;
        var results = await LibraryGetter.GetFeedForSeason(SeasonInfo.Season, SeasonInfo.Year)
            .MapAsync(lib => Map(lib, user))
            .LogErrors(Logger);

        _movies = results.Match(
            collection => collection,
            _ => []
        );
    }

    private BaseMovie[] Map(ImmutableList<MovieLibrary> seasonCollection, AppUser user)
    {
        return user switch
        {
            AuthenticatedUser u => seasonCollection.Select(a => MapForAuthenticatedUser(a, u)).ToArray(),
            _ => seasonCollection.Select(MapForAnonymous).ToArray()
        };
    }

    private BaseMovie MapForAnonymous(MovieLibrary anime)
    {
        return anime.AirDate switch
        {
            not null => new AvailableMovie(anime.Id, anime.Season, anime.Title, anime.Synopsis, anime.ImageUrl, anime.AirDate ?? default, anime.Links),
            _ => new NotAvailableMovie(anime.Id, anime.Season, anime.Title, anime.Synopsis, anime.ImageUrl)
        };
    }

    private BaseMovie MapForAuthenticatedUser(MovieLibrary anime, AuthenticatedUser user)
    {
        return anime.AirDate switch
        {
            not null => user.MovieSubscriptions.Subscriptions.Contains(anime.Title)
                ? new SubscribedMovie(anime.Id, anime.Season, anime.Title, anime.Synopsis, anime.ImageUrl, anime.AirDate ?? default, user.UserId, user is AdminUser, anime.Links)
                : new UnsubscribedMovie(anime.Id, anime.Season, anime.Title, anime.Synopsis, anime.ImageUrl, anime.AirDate ?? default, user.UserId, user is AdminUser, anime.Links),
            _ => new NotAvailableMovie(anime.Id, anime.Season, anime.Title, anime.Synopsis, anime.ImageUrl)
        };
    }

}