@page "/Login"
@using System.Security.Claims
@using AnimeFeedManager.Features.Users.IO
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies

@inject IPasswordlessLogin PasswordlessLogin;
@inject NavigationManager NavigationManager;
@inject ILogger<Login> Logger;

<PageTitle>@PageTitle("Login")</PageTitle>

<section class="hero min-h-[95vh] bg-base-100" hx-boost="false">
    <div class="hero-content flex-col lg:flex-row-reverse">
        <div class="text-center lg:text-left">
            <h1 class="text-5xl font-bold">Login</h1>
            <p class="py-6">Use your username (email) to access the system using a passkey stored in your device</p>
        </div>
        <div class="card shrink-0 w-full max-w-sm shadow-2xl bg-base-300">
            <form method="post"
                  class="card-body"
                  x-data="login()"
                  x-on:submit.prevent="$event.target.checkValidity() ? login($event) : $event.target.reportValidity()"
                  @onsubmit="Submit"
                  @formname="login">
                <AntiforgeryToken/>
                <fieldset class="form-control">
                    <label for="user-alias" class="floating-label">
                        <span>Please provide an email</span>

                        <input @bind-value="Alias"
                               type="email"
                               id="user-alias"
                               name="alias"
                               required
                               x-model="alias"
                               x-ref="alias"
                               placeholder="Enter your Email"
                               class="input validator"/>
                        <input @bind-value="Id" name="id" type="hidden" id="id-value"/>
                    </label>
                </fieldset>
                <div class="form-control">
                    <button class="btn btn-primary mt-4">Login</button>
                </div>
                <template x-if="result && !result.success && !result.unauthorized">
                    <div class="bg-error text-error-content rounded-box p-4 mt-2">
                        <ul>
                            <template x-for=" error in Object.values(result.errors)">
                                <li x-text="error"></li>
                            </template>
                        </ul>
                    </div>
                </template>
                <template x-if="result && result.unauthorized">
                    <div class="bg-error text-error-content rounded-box p-4 mt-2">
                        <p>Your account is not registered.
                            <NavLink class="link" href="register">Register</NavLink>
                        </p>
                    </div>
                </template>
            </form>
            @if (ServerError)
            {
                <div class="bg-error text-error-content rounded-box p-4 mt-2">
                    <p>An error has occurred. Please Try again</p>
                </div>
            }

        </div>
    </div>
</section>

@code {
    [SupplyParameterFromForm] public string? Id { get; set; }
    [SupplyParameterFromForm] public string? Alias { get; set; }

    [SupplyParameterFromQuery(Name = "returnUrl")]
    public string ReturnUrl { get; set; } = "";

    [CascadingParameter] public HttpContext HttpContext { get; set; } = default!;

    private bool ServerError { get; set; }

    private async Task Submit()
    {
        var result = await UserId.Parse(Id ?? string.Empty)
            .BindAsync(userId => PasswordlessLogin.GetUserInfo(userId, default))
            .MapAsync(role => CreatePrincipal(Id ?? string.Empty, Alias ?? string.Empty, role));


        await result.Match(
            CompleteLogin,
            ShowError
        );
    }

    private async Task CompleteLogin(ClaimsPrincipal principal)
    {
        await HttpContext.SignInAsync(principal, new AuthenticationProperties {IsPersistent = true});
        NavigationManager.NavigateTo(!string.IsNullOrWhiteSpace(ReturnUrl) ? ReturnUrl : "/");
    }

    private Task ShowError(DomainError error)
    {
        error.LogError(Logger);
        ServerError = true;
        return Task.CompletedTask;
    }

    private ClaimsPrincipal CreatePrincipal(string id, string user, string role)
    {
        var claims = new List<Claim>
        {
            new(ClaimTypes.Name, user),
            new(ClaimTypes.Email, user),
            new(CustomClaimTypes.Sub, id),
            new(ClaimTypes.Role, role)
        };

        return
            new ClaimsPrincipal(new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme));
    }

}