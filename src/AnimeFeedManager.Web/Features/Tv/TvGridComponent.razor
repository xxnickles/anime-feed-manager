@using AnimeFeedManager.Old.Common.Domain.Errors
@using AnimeFeedManager.Old.Common.Domain.Types
@using AnimeFeedManager.Old.Common.Dto
@using AnimeFeedManager.Old.Common.Types
@using AnimeFeedManager.Old.Features.Tv.Library
@inject TvLibraryGetter LibraryGetter;
@inject ILogger<TvGridComponent> Logger;
@inject IUserProvider UserProvider;

<WithMessage Message="@Message" DomainError="@DomainError">
    <Content>
        <GridSection x-data="gridFilter()">
            <GridControls>
                <ul class="menu menu-xs menu-horizontal bg-base-200 rounded-box mx-2 md:mx-10">
                    @if (!_isAnonymous)
                    {
                        <li>
                            <a x-on:click.throttle.300ms="toggleFilter('@Attributes.SubscribedAttributeDefinition.Attribute')">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <title>Filter Subscribed</title>
                                    <details>Filters Anime series you are subscribed</details>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z"></path>
                                </svg>
                                <span>Filter Subscribed</span>
                                <div x-show="filters.includes('@Attributes.SubscribedAttributeDefinition.Attribute')" class="badge badge-primary badge-xs"></div>
                            </a>
                        </li>

                        <li>
                            <a x-on:click.throttle.300ms="toggleFilter('@Attributes.InterestedAttributeDefinition.Attribute')">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <title>Filter Interested</title>
                                    <details>Filters Anime series you are interested</details>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6.633 10.25c.806 0 1.533-.446 2.031-1.08a9.041 9.041 0 0 1 2.861-2.4c.723-.384 1.35-.956 1.653-1.715a4.498 4.498 0 0 0 .322-1.672V2.75a.75.75 0 0 1 .75-.75 2.25 2.25 0 0 1 2.25 2.25c0 1.152-.26 2.243-.723 3.218-.266.558.107 1.282.725 1.282m0 0h3.126c1.026 0 1.945.694 2.054 1.715.045.422.068.85.068 1.285a11.95 11.95 0 0 1-2.649 7.521c-.388.482-.987.729-1.605.729H13.48c-.483 0-.964-.078-1.423-.23l-3.114-1.04a4.501 4.501 0 0 0-1.423-.23H5.904m10.598-9.75H14.25M5.904 18.5c.083.205.173.405.27.602.197.4-.078.898-.523.898h-.908c-.889 0-1.713-.518-1.972-1.368a12 12 0 0 1-.521-3.507c0-1.553.295-3.036.831-4.398C3.387 9.953 4.167 9.5 5 9.5h1.053c.472 0 .745.556.5.96a8.958 8.958 0 0 0-1.302 4.665c0 1.194.232 2.333.654 3.375Z"/>
                                </svg>
                                <span>Filter Interested</span>
                                <div x-show="filters.includes('@Attributes.InterestedAttributeDefinition.Attribute')" class="badge badge-primary badge-xs"></div>
                            </a>
                        </li>
                    }

                    <li>
                        <a x-on:click.throttle.300ms="toggleFilter('@Attributes.AvailableAttributeDefinition.Attribute')">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <title>Filter Available</title>
                                <details>Filters available Anime Series</details>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12.75 11.25 15 15 9.75M21 12c0 1.268-.63 2.39-1.593 3.068a3.745 3.745 0 0 1-1.043 3.296 3.745 3.745 0 0 1-3.296 1.043A3.745 3.745 0 0 1 12 21c-1.268 0-2.39-.63-3.068-1.593a3.746 3.746 0 0 1-3.296-1.043 3.745 3.745 0 0 1-1.043-3.296A3.745 3.745 0 0 1 3 12c0-1.268.63-2.39 1.593-3.068a3.745 3.745 0 0 1 1.043-3.296 3.746 3.746 0 0 1 3.296-1.043A3.746 3.746 0 0 1 12 3c1.268 0 2.39.63 3.068 1.593a3.746 3.746 0 0 1 3.296 1.043 3.746 3.746 0 0 1 1.043 3.296A3.745 3.745 0 0 1 21 12Z"/>
                            </svg>
                            <span>Filter Available</span>
                            <div x-show="filters.includes('@Attributes.AvailableAttributeDefinition.Attribute')" class="badge badge-primary badge-xs"></div>
                        </a>
                    </li>

                    <li>
                        <a x-on:click.throttle.300ms="toggleFilter('@Attributes.CompletedAttributeDefinition.Attribute')">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <title>Filter Completed</title>
                                <details>Filters completed Anime series</details>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.125 2.25h-4.5c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125v-9M10.125 2.25h.375a9 9 0 0 1 9 9v.375M10.125 2.25A3.375 3.375 0 0 1 13.5 5.625v1.5c0 .621.504 1.125 1.125 1.125h1.5a3.375 3.375 0 0 1 3.375 3.375M9 15l2.25 2.25L15 12"/>
                            </svg>
                            <span>Filter Completed</span>
                            <div x-show="filters.includes('@Attributes.CompletedAttributeDefinition.Attribute')" class="badge badge-primary badge-xs"></div>
                        </a>
                    </li>


                </ul>
            </GridControls>
            <GridContent>
                @foreach (var item in _animes.Select((value, index) => new { value, index }))
                {
                    <TvCard Anime="item.value" style="@GenerateViewTransitionNameStyle($"card-{item.index}")"></TvCard>
                }
            </GridContent>
        </GridSection>
    </Content>
</WithMessage>

@code {
    [Parameter, EditorRequired] public SeasonInformation SeasonInfo { get; set; } = new DefaultSeasonInformation();
    [Parameter] public string Message { get; set; } = string.Empty;
    [Parameter] public DomainError? DomainError { get; set; }
    private BaseTvAnime[] _animes = [];
    private bool _isAnonymous = true;


    protected override async Task OnInitializedAsync()
    {
        var user = await UserProvider.GetCurrentUser(default);
        _isAnonymous = user is Anonymous;

        var results = await LibraryGetter.GetForSeason(SeasonInfo.Season, SeasonInfo.Year)
            .MapAsync(lib => MapForUser(lib, user))
            .LogErrors(Logger);

        _animes = results.Match(
            collection => collection,
            _ => []
        );
    }

    private BaseTvAnime[] MapForUser(SeasonCollection seasonCollection, AppUser user)
    {
        return user switch
        {
            AuthenticatedUser u => seasonCollection.Animes.Select(a => MapForAuthenticatedUser(a, u)).ToArray(),
            _ => seasonCollection.Animes.ToArray<BaseTvAnime>()
        };
    }

    private BaseTvAnime MapForAuthenticatedUser(FeedAnime anime, AuthenticatedUser user)
    {
        return anime.FeedInformation.Status switch
        {
            SeriesStatus.NotAvailableValue => user.TvSubscriptions.Insterested.Select(x => x.ToString()).Contains(anime.Title)
                ? new InterestedAnime(anime.Id, anime.Season, anime.Title, anime.Synopsis, anime.ImageUrl, user.UserId, user is AdminUser, anime.SeriesStatus)
                : new NotAvailableAnime(anime.Id, anime.Season, anime.Title, anime.Synopsis, anime.ImageUrl, user.UserId, user is AdminUser, anime.SeriesStatus),
            SeriesStatus.CompletedValue => new CompletedAnime(anime.Id, anime.Season, anime.Title, anime.Synopsis, anime.ImageUrl),
            SeriesStatus.OngoingValue => user.TvSubscriptions.Subscriptions.Select(x => x.ToString()).Contains(anime.FeedInformation.Title ?? string.Empty)
                ? new SubscribedAnime(anime.Id, anime.Season, anime.Title, anime.Synopsis, anime.ImageUrl, anime.FeedInformation.Title ?? string.Empty, user.UserId, user is AdminUser, anime.SeriesStatus)
                : new UnSubscribedAnime(anime.Id, anime.Season, anime.Title, anime.Synopsis, anime.ImageUrl, anime.FeedInformation.Title ?? string.Empty, user.UserId, user is AdminUser, anime.SeriesStatus),
            _ => anime
        };
    }
    

}