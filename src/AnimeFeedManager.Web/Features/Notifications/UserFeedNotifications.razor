@using AnimeFeedManager.Old.Common.Domain.Errors
@using AnimeFeedManager.Old.Common.Domain.Types
@using AnimeFeedManager.Old.Features.Notifications
@using AnimeFeedManager.Old.Features.Notifications.Types
@using Microsoft.AspNetCore.Authorization
@page "/user-feed-notifications"
@attribute [Authorize]
@inject FeedNotificationsCollector FeedCollector
@inject ILogger<UserFeedNotifications> Logger;
@inject IUserProvider UserProvider

<div class="md:container md:mx-auto mt-8">
    <h1 class="text-bold text-2xl">Available TV notifications</h1>
    <h2 class="text-sm mb-4">Notifications that have been sent to you by the system</h2>
    <div class="divider"></div>
    
    @if (!_userFeed.Any())
    {
        <div class="alert alert-warning w-fit">
            <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"/>
            </svg>
            <span>There are no notifications sent to your user</span>
        </div>
    }

    @foreach (var t in _userFeed.OrderBy(d => d.Key))
    {
        <details>
            <summary>@t.Key</summary>
            <table class="table table-zebra">
                <thead>
                <tr>
                    <th>Episode</th>
                    <th>Links</th>
                </tr>
                </thead>
                <tbody class="text-base-content">
                @foreach (var links in t.Value.OrderBy(v => v.EpisodeInfo))
                {
                    <tr>
                        <td>@links.EpisodeInfo</td>
                        <td>
                            <span class="flex gap-3">
                                @foreach (var seriesLink in links.Links)
                                {
                                    <a href="@seriesLink.Link" aria-label="@GetLabel(seriesLink.Type)" target="_blank" class="link link-primary">
                                        @switch (seriesLink.Type)
                                        {
                                            case LinkType.None:
                                                break;
                                            case LinkType.TorrentFile:
                                                <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                                                    <path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75V16.5M16.5 12 12 16.5m0 0L7.5 12m4.5 4.5V3"/>
                                                </svg>
                                                break;
                                            case LinkType.Magnet:
                                                <!--!Font Awesome Free 6.5.2 by fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
                                                <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 448 512" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                                                    <path d="M0 160v96C0 379.7 100.3 480 224 480s224-100.3 224-224V160H320v96c0 53-43 96-96 96s-96-43-96-96V160H0zm0-32H128V64c0-17.7-14.3-32-32-32H32C14.3 32 0 46.3 0 64v64zm320 0H448V64c0-17.7-14.3-32-32-32H352c-17.7 0-32 14.3-32 32v64z"/>
                                                </svg>
                                                break;
                                        }
                                    </a>
                                }
                            </span >
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </details>
    }
</div>

@code {

    private Dictionary<string, FeedDetails[]> _userFeed = new();

    protected override async Task OnInitializedAsync()
    {
        var user = await UserProvider.GetCurrentUser(default);
        if (user is AuthenticatedUser u)
        {
            var result = await FeedCollector.GetUserFeedNotifications(u.UserId, default).LogErrors(Logger);
            _userFeed = result.Match(
                item => item.Feed,
                _ => new Dictionary<string, FeedDetails[]>()
            );
        }
    }

    private static string GetLabel(LinkType linkType) => linkType switch
    {
        LinkType.Magnet => "Magnet",
        LinkType.TorrentFile => "Torrent",
        _ => "None"
    };

}